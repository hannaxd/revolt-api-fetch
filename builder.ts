import openapi from "openapi-typescript";

const notice =
  `// This file was auto-generated by @rawrxd/revolt-api - do not edit manually\n`;

Deno.readTextFile("openapi.json").then((data) => {
  Deno.mkdirSync("out", { recursive: true });
  Deno.copyFile("base/mod.ts", "out/mod.ts");

  // do the replace patch if needed
  if (Deno.env.get("REWRITE_ANYOF")) {
    data = data.replace(/"anyOf"/g, '"oneOf"');
  }

  // toJSON
  const spec = JSON.parse(data);

  openapi(spec, { commentHeader: notice }).then((data) => {
    Deno.writeTextFile(
      "out/schema.ts",
      data.replace("T extends any", "T extends unknown"),
    );
  });

  {
    const entries = [
      "import type { paths } from './schema.ts';",
      "export type APIRoutes =",
    ];
    const paths = Object.keys(spec.paths);
    const queryData: Record<string, unknown[]> = {};

    for (const path of paths) {
      const data = spec.paths[path];
      const methods = Object.keys(data);

      const template = path.replace(/\{\w+\}/g, "${string}");

      for (const method of methods) {
        const operation = `paths['${path}']['${method}']`;

        const route = data[method];
        const routeResponse = Object.keys(route["responses"]).find((x) =>
          x !== "default"
        ) || "default";
        const content_type =
          Object.keys(route["responses"][routeResponse]["content"] || {})[0];
        const response = routeResponse === "204" || !content_type
          ? "undefined"
          : `${operation}['responses']['${routeResponse}']['content']['${content_type}']`;

        const queryParams = [];
        let hasBody = false;

        if (route["parameters"]) {
          for (const parameter of route["parameters"]) {
            if (parameter.in === "query") {
              queryParams.push(parameter.name);
            }
          }
        }

        if (route["requestBody"]?.["content"]?.["application/json"]) {
          hasBody = true;
        }

        let params = "undefined";
        if (hasBody || queryParams.length > 0) {
          const entries = [];

          if (queryParams.length > 0) {
            entries.push(`${operation}['parameters']['query']`);
          }

          if (hasBody) {
            entries.push(
              `${operation}['requestBody']['content']['application/json']`,
            );
          }

          params = entries.join("|");
        }

        const parts = path.split("").filter((x) => x === "/").length;
        entries.push(
          `| { method: '${method}', path: \`${template}\`, parts: ${parts}, params: ${params}, response: ${response} }`,
        );

        if (/\{\w+\}/.test(path)) {
          entries.push(
            `| { method: '${method}', path: '-${path}', parts: ${parts}, params: ${params}, response: ${response} }`,
          );
        }

        queryData[path] = {
          ...queryData[path],
          [method]: queryParams,
        };
      }
    }

    // deno-lint-ignore no-explicit-any
    const pathResolve = {} as Record<number, any>;
    for (const path of paths) {
      const segments = path.split("/");
      segments.shift();
      pathResolve[segments.length] = [
        ...(pathResolve[segments.length] || []),
        segments.map((key) => /\{.*\}/.test(key) ? [key] : key),
      ];
    }

    Deno.writeTextFile("out/routes.ts", notice + entries.join("\n") + ";");
    Deno.writeTextFile(
      "out/params.ts",
      notice + "export const pathResolve = " + JSON.stringify(pathResolve) +
        ";\n" + "export const queryParams = " + JSON.stringify(queryData) + ";",
    );
  }

  {
    const entries = ["import type { components } from './schema.ts';"];
    const schemas = spec.components.schemas;

    for (const schema of Object.keys(schemas)) {
      entries.push(
        `export type ${
          schema.replace(/\s/g, "_")
        } = components['schemas']['${schema}'];`,
      );
    }

    Deno.writeTextFile("out/types.ts", notice + entries.join("\n") + ";");
  }

  const baseURL = spec["servers"]?.[0]?.["url"];
  Deno.writeTextFile(
    "out/baseURL.ts",
    notice +
      `export const defaultBaseURL = ${
        baseURL ? '"' + baseURL + '"' : "undefined"
      };`,
  );
});
